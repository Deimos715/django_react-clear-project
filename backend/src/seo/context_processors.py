import re
import logging
from django.templatetags.static import static
from .models import MetaTag

# logger = logging.getLogger(__name__)

def seo_data(request, instance=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç SEO-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø–æ URL.
    :param request: HttpRequest
    :param instance: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ (Portfolio, Article –∏ —Ç.–¥.)
    :return: –°–ª–æ–≤–∞—Ä—å —Å metatag
    """
    current_url = request.path
    # logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º SEO –¥–ª—è URL: {current_url}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    metatag = None

    # 1. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç, –±–µ—Ä–µ–º SEO-–¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
    if instance:
        # logger.debug(f"–ò—â–µ–º SEO-–¥–∞–Ω–Ω—ã–µ —É –æ–±—ä–µ–∫—Ç–∞ {instance.__class__.__name__} (ID: {instance.id})")

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∑–∞–∫–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –Ω—É–∂–Ω–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        # if hasattr(instance, 'title') and instance.title:
        #     title = instance.title
        #     if hasattr(title, 'title_page'):
        #         logger.debug(f"–ù–∞–π–¥–µ–Ω Title: {title.title_page}")
        #     else:
        #         logger.debug(f"–ù–∞–π–¥–µ–Ω Title: {title}")

        if hasattr(instance, 'meta_tags') and instance.meta_tags:
            metatag = instance.meta_tags
            # logger.debug(f"–ù–∞–π–¥–µ–Ω MetaTag: {metatag.og_title}")

    # 2. –ï—Å–ª–∏ –º–µ—Ç–∞—Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É URL
    if not metatag:
        # logger.debug(f"üîç –ü–æ–∏—Å–∫ MetaTag –ø–æ URL: {current_url}")
        metatag = MetaTag.objects.filter(url=current_url).first()

        # –ï—Å–ª–∏ –∏ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if not metatag:
            base_url = re.sub(r'(/\d+/?$)', '/', current_url)
            # logger.debug(f"–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ MetaTag –ø–æ –±–∞–∑–æ–≤–æ–º—É URL: {base_url}")
            metatag = MetaTag.objects.filter(url=base_url).first()

    # 3. –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if not metatag:
        # logger.warning(f'–ù–µ –Ω–∞–π–¥–µ–Ω MetaTag –¥–ª—è URL: {current_url}')
        metatag = MetaTag(
            title_page='Default title page',
            og_type='website',
            og_title='Default title page',
            og_description='Default Og:description',
            og_url=f'{request.scheme}://{request.get_host()}{current_url}',
            og_site_name='Default Site name',
            og_locale='ru_RU',
            description='Default Description',
        )

    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Ç–∞—Ç–µ–≥–æ–≤
    seo_metatag = {
        'title_page': metatag.title_page,
        'og_image': f'{request.scheme}://{request.get_host()}{static("img/open_graph_preview.png")}',
        'og_image_secure_url': f'{request.scheme}://{request.get_host()}{static("img/open_graph_preview.png")}',
        'og_image_width': '1200',
        'og_image_height': '630',
        'vk_image': f'{request.scheme}://{request.get_host()}{static("img/open_graph_preview.png")}?format=vk',
        'og_image_alt': 'Image alt text',
        'og_image_type': 'image/png',
        'og_type': metatag.og_type,
        'og_title': metatag.og_title,
        'og_description': metatag.og_description,
        'og_url': metatag.og_url,
        'og_site_name': metatag.og_site_name,
        'og_locale': metatag.og_locale,
        'description': metatag.description,
    }

    # logger.debug(f"–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: MetaTag.title_page = {seo_metatag['title_page']}")

    return {
        'metatag': seo_metatag,
    }